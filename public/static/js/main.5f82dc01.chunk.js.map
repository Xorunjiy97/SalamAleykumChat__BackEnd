{"version":3,"sources":["modules/login/Login.jsx","REST.js","constants/index.js","modules/login/selectors.js","modules/login/index.js","modules/login/actions.js","websocket/Websoket.js","modules/messenger/Messenger.jsx","modules/messenger/selectors.js","modules/messenger/index.js","modules/messenger/actions.js","modules/mainPage/MainPage.jsx","modules/mainPage/selectors.js","modules/mainPage/index.js","App.js","reportWebVitals.js","manager/loginManager/reducer.js","roots/rootReducer/rootReducer.js","index.js"],"names":["Login","props","handleInput","event","target","name","value","onSaveLogin","setState","login","handleClick","saveCurrentUser","preventDefault","state","length","userName","console","log","user","fetch","method","headers","body","JSON","stringify","then","res","json","e","api","checkLogIn","alert","result","currentUserLoged","this","currentUserName","className","children","placeholder","onChange","id","onClick","React","PureComponent","Object","defineProperties","GET_CHAT","writable","OPEN_CHAT_PAGE","OPEN_AUTORISATION_PAGE","SAVE_CURRENT_USER_STORE","SAVE_CURRENT_MESSAGE_STORE","getCurrentUserName","loginPage","getCurrentUserStatus","isLoged","connect","selectors","dispatch","payload","type","constants","actions","Component","WS","onOpen","onClose","getOnMessage","cb","_ws","onmessage","message","data","parse","sendMessage","send","_host","window","location","origin","replace","WebSocket","onopen","bind","onclose","Messenger","printChat","chat","allMessages","onSaveMessage","messageInfo","ws","Ws","map","item","getCurrentChat","getCurrentUser","MainPage","memo","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","combineReducers","action","store","createStore","rootReducer","ReactDOM","render","document","getElementById","init"],"mappings":"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","file":"static/js/main.5f82dc01.chunk.js","sourcesContent":["import React from 'react';\r\nimport './loginStyles.css';\r\nimport * as api from '../../REST'\r\nclass Login extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            login: '',\r\n        };\r\n    }\r\n\r\n    handleInput = event => {\r\n        const {\r\n            name,\r\n            value,\r\n        } = event.target;\r\n        const {\r\n            onSaveLogin,\r\n        } = this;\r\n\r\n         if (name === 'login') {\r\n\r\n            onSaveLogin(value);\r\n        }\r\n    }\r\n\r\n    onSaveLogin = value => {\r\n        this.setState(() => ({\r\n            login: value,\r\n        }));\r\n    }\r\n\r\n    handleClick = event => {\r\n        const { \r\n            saveCurrentUser,\r\n            } = this.props;\r\n        event.preventDefault();\r\n        if(this.state.login.length !== 0){\r\n            saveCurrentUser(this.state.login);\r\n            const userName = this.state.login;\r\n            console.log(userName);\r\n            api.logIn({ userName }).then(res => this.checkLogIn(res))\r\n        } else {\r\n            alert('Введите имя пользователя');\r\n        }\r\n    }\r\n\r\n    checkLogIn = result => {\r\n        const { \r\n            currentUserLoged \r\n            } = this.props;\r\n        if(result){\r\n            currentUserLoged();\r\n        }else{\r\n            alert(\"Данное имя на данный момент закреплено за другим пользователем. Попробуйте другое имя.\");\r\n        }\r\n      }\r\n\r\n    render() {\r\n        const {\r\n            currentUserName,\r\n        } = this.props;\r\n        const {\r\n            handleClick,\r\n            handleInput,\r\n        } = this;\r\n        return (\r\n            <div className={'root__avtoriz-container'}>\r\n                <div className={'avtoriz-container__heder-div'}>\r\n                    <h1 className={'heder-div__heder-text'}\r\n                        children={'Salam Aleykum'}\r\n                    ></h1>\r\n                </div>\r\n                <div className={'window__login-body'}>\r\n                    <div className={'avtoriz-container__login-input-div'}>\r\n                        <input name={'login'}\r\n                            placeholder= {'Введите логин...'}\r\n                            className={'login-input-div__login-input'}\r\n                            onChange={handleInput}\r\n                        /> \r\n                    </div>\r\n                </div>\r\n                <div className={'avtoriz-container__login-button-div'}>\r\n                    <button id={'login-button'}\r\n                    className={'login-button-div__login-button'}\r\n                    onClick={handleClick}\r\n                    ></button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n","// export function addNewMessage(message) {\r\n//     try {\r\n//         return fetch('http://localhost:3002/addMessage', {\r\n//             method: 'POST',\r\n//             headers: {\r\n//                 'Content-Type': 'application/json',\r\n//             },\r\n//             body: JSON.stringify(message),\r\n//         });\r\n//     } catch (e) {\r\n//         console.log('ERROR', e);\r\n//     }\r\n// }\r\n\r\nexport function getAllMessages() {\r\n    try {\r\n        return fetch('http://localhost:3002/getAllMessages')\r\n        .then(res => res.json());\r\n    } catch (e) {\r\n        console.log('ERROR', e);\r\n    }\r\n}\r\n\r\nexport function logIn(user) {\r\n    try {\r\n        return fetch('http://localhost:3002/logIn', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(user),\r\n        })\r\n        .then(res => res.json());\r\n    } catch (e) {\r\n        console.log('ERROR', e);\r\n    }\r\n}\r\n\r\nexport function logOut(user) {\r\n    try {\r\n        return fetch('http://localhost:3002/logOut', {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(user),\r\n        });\r\n    } catch (e) {\r\n        console.log('ERROR', e);\r\n    }\r\n}\r\n","const constants = {};\r\n\r\nexport default Object.defineProperties(constants, {\r\n    GET_CHAT                  : { value: 'get_chat', writable: false },\r\n    OPEN_CHAT_PAGE            : { value: 'open_chat_page', writable: false },\r\n    OPEN_AUTORISATION_PAGE    : { value: 'open_autorisation_page', writable: false },\r\n    SAVE_CURRENT_USER_STORE   : { value: 'save_current_user_store', writable: false },\r\n    SAVE_CURRENT_MESSAGE_STORE: { value: 'save-current_message_store', writable: false },\r\n})\r\n","export const getCurrentUserName = state => state.loginPage.user;\r\nexport const getCurrentUserStatus = state => state.loginPage.isLoged;\r\n","import Component from './Login.jsx';\r\nimport * as actions from './actions';\r\nimport * as selectors from './selectors';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoged: selectors.getCurrentUserStatus(state),\r\n    currentUserName: selectors.getCurrentUserName(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    saveCurrentUser: payload => dispatch(actions.onSaveCurrentUser(payload)),\r\n    currentUserLoged:() => dispatch(actions.openChatPage()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);\r\n","import constants from '../../constants';\r\n\r\nexport const onSaveCurrentUser = payload => ({\r\n    type: constants.SAVE_CURRENT_USER_STORE,\r\n    payload,\r\n});\r\n\r\nexport const openChatPage = () => ({\r\n    type: constants.OPEN_CHAT_PAGE ,\r\n});\r\n\r\nexport const openAutorisationPage = () => ({\r\n    type: constants.OPEN_AUTORISATION_PAGE,\r\n});\r\n","class WS {\r\n    constructor() {\r\n        this._host = window.location.origin.replace(/^http/, 'ws');\r\n        this._ws = new WebSocket(this._host);\r\n\r\n        this._ws.onopen = this.onOpen.bind(this);\r\n        this._ws.onclose = this.onClose.bind(this);\r\n    }\r\n\r\n    onOpen = () => {\r\n        console.log('----WEBSOCKET CONNECTED---------');\r\n    }\r\n\r\n    onClose = () => {\r\n        console.log('----WEBSOCKET DISCONNECTED---------');\r\n    }\r\n\r\n    getOnMessage = cb => {\r\n        this._ws.onmessage = message => {\r\n            const { data } = message;\r\n            cb(JSON.parse(data));\r\n        }\r\n    }\r\n\r\n    sendMessage = message => {\r\n        this._ws.send(JSON.stringify(message));\r\n    }\r\n}\r\n\r\nexport default WS;\r\n","import React from 'react';\r\nimport { getChat } from './actions';\r\nimport './messangerStyled.css';\r\nimport Ws from '../../websocket/Websoket';\r\nimport * as api from '../../REST';\r\n\r\nexport default class Messenger extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            message: '',\r\n            allMessages: [],\r\n        }\r\n\r\n        this.ws = new Ws();\r\n\r\n        api.getAllMessages().then(res => this.printChat(res));\r\n        this.ws.getOnMessage(this.printChat.bind(this));\r\n    }\r\n\r\n    printChat = chat => {\r\n        this.setState({\r\n            allMessages: chat,\r\n        });\r\n    }\r\n\r\n    handleInput = event => {\r\n        const {\r\n            value,\r\n        } = event.target;\r\n        const {\r\n            onSaveMessage,\r\n        } = this;\r\n        onSaveMessage(value);\r\n\r\n        // clearInput = event => { event.target.value = ''; }\r\n    }\r\n\r\n    onSaveMessage = value => {\r\n        this.setState(() => ({\r\n            message: value,\r\n            name: value,\r\n        }));\r\n    }\r\n\r\n    handleClick = event => {\r\n        const {\r\n            currentUserLoged,\r\n            user\r\n        } = this.props;\r\n        const { name } = event.target;\r\n        event.preventDefault();\r\n        \r\n        if(name === \"send\") {\r\n           this.sendMessage(this.state.message);\r\n           this.setState({\r\n                name : ''\r\n           });\r\n        } else {\r\n            currentUserLoged();\r\n            console.log(user);\r\n            api.logOut( { user } );\r\n        }\r\n    }\r\n\r\n    sendMessage = message => {\r\n        const {\r\n            sendMessage,\r\n            user\r\n        } = this.props;\r\n        const {\r\n            onSaveMessage,\r\n        } = this;\r\n        if(message.length !== 0){\r\n            onSaveMessage(message);\r\n            const messageInfo = {user : user, message: message};\r\n            sendMessage(messageInfo);\r\n            this.ws.sendMessage(messageInfo);\r\n        } else {\r\n            alert('Введите сообщение');\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            handleInput,\r\n            handleClick,\r\n        } = this;\r\n\r\n        return (\r\n         <div className={\"main-conatiner\"}>           \r\n            <div className={'main-container__header'}>\r\n                <button name={\"close\"} className={\"main-container__log-out\"} children={\"X\"} onClick={handleClick} />\r\n                <div className={\"header__window-message\"}>\r\n                    <div>\r\n                        <ul className={\"ul__li\"} >\r\n                            { // здесь будет отрисовано необходимое кол-во компонентов\r\n                                this.state.allMessages.map((item) => (\r\n                                    <li children= { `${item.user}    ` + `${item.message}`} />\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={\"main-container__footer\"}>\r\n                <input className={\" footer__input-footer\"} onChange={handleInput} value= {this.state.name} />\r\n                <button name={\"send\"} className={\" footer__button-footer\"} children={\"Send\"} onClick={handleClick} />\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n","export const getCurrentUserStatus = state => state.loginPage.isLoged;\r\nexport const getCurrentChat = state => state.loginPage.chat;\r\nexport const getCurrentUser = state => state.loginPage.user;","import Component from './Messenger.jsx';\r\nimport * as actions from './actions';\r\nimport * as selectors from './selectors';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoged: selectors.getCurrentUserStatus(state),\r\n    chat: selectors.getCurrentChat(state),\r\n    user: selectors.getCurrentUser(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    currentUserLoged:() => dispatch(actions.openAutorisationPage()),\r\n    sendMessage: payload => dispatch(actions.saveMessage(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);","import constants from '../../constants';\r\n\r\nexport const openAutorisationPage = () => ({\r\n    type: constants.OPEN_AUTORISATION_PAGE,\r\n});\r\n\r\nexport const saveMessage = payload => ({\r\n    type: constants.SAVE_CURRENT_MESSAGE_STORE,\r\n    payload,\r\n});\r\n    ","import React from 'react';\r\nimport Login from '../login';\r\nimport Messenger from '../messenger';\r\n\r\nconst MainPage = props => {\r\n    const { isLoged } = props;\r\n    return (\r\n        <>\r\n            {!isLoged ? <Login /> : <Messenger />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(MainPage);","export const getCurrentUserStatus = state => state.loginPage.isLoged;","import Component from './MainPage';\r\nimport * as selectors from './selectors';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => ({\r\n    isLoged: selectors.getCurrentUserStatus(state),\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(Component);","import React from 'react';\r\nimport MainPage from './modules/mainPage/index';\r\n\r\nfunction App() {\r\n  return (\r\n      <MainPage/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import constants from '../../constants';\r\n\r\nconst initialState = {\r\n        user: '',\r\n        isLoged: false,\r\n        chat: []\r\n    \r\n}\r\n// eslint-disable-next-line\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case constants.SAVE_CURRENT_USER_STORE:\r\n            return {\r\n                ...state,\r\n                    user: action.payload,\r\n               \r\n            }\r\n            case constants.OPEN_CHAT_PAGE:\r\n            return {\r\n                \r\n                ...state,\r\n                isLoged: true,\r\n            };\r\n        case constants.OPEN_AUTORISATION_PAGE:\r\n            return {\r\n                ...state,\r\n                isLoged: false,\r\n                user : '',\r\n            };\r\n        case constants.SAVE_CURRENT_MESSAGE_STORE:\r\n            return {\r\n                ...state,\r\n                chat: [...state.chat, action.payload],               \r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport loginPage from '../../manager/loginManager/reducer';\r\n\r\n\r\nexport default combineReducers({\r\n    loginPage,\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './roots/rootReducer/rootReducer';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nfunction init() {\r\n    const store = createStore(rootReducer)\r\n    window.store = store;\r\n\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\ninit();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}